<?php
/**
 * Device
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Tasmota Device Manager API
 *
 * Device manager for Tasmota devices via MQTT [Source](https://github.com/mbezuidenhout/tasmota.mqtt.device.manager).
 *
 * OpenAPI spec version: 0.1.0
 * Contact: marius.bezuidenhout@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.34
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Device Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Device implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Device';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'topic' => 'string',
'full_topic' => 'string',
'device_name' => 'string',
'module' => 'string',
'online' => 'bool',
'load_avg' => 'int',
'timezone' => 'string',
'wifi' => '\Swagger\Client\Model\Wifi',
'status_net' => '\Swagger\Client\Model\Network',
'status_fwr' => '\Swagger\Client\Model\Firmware'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'topic' => null,
'full_topic' => null,
'device_name' => null,
'module' => null,
'online' => null,
'load_avg' => null,
'timezone' => null,
'wifi' => null,
'status_net' => null,
'status_fwr' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'topic' => 'Topic',
'full_topic' => 'FullTopic',
'device_name' => 'DeviceName',
'module' => 'Module',
'online' => 'Online',
'load_avg' => 'LoadAvg',
'timezone' => 'Timezone',
'wifi' => 'Wifi',
'status_net' => 'StatusNET',
'status_fwr' => 'StatusFWR'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'topic' => 'setTopic',
'full_topic' => 'setFullTopic',
'device_name' => 'setDeviceName',
'module' => 'setModule',
'online' => 'setOnline',
'load_avg' => 'setLoadAvg',
'timezone' => 'setTimezone',
'wifi' => 'setWifi',
'status_net' => 'setStatusNet',
'status_fwr' => 'setStatusFwr'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'topic' => 'getTopic',
'full_topic' => 'getFullTopic',
'device_name' => 'getDeviceName',
'module' => 'getModule',
'online' => 'getOnline',
'load_avg' => 'getLoadAvg',
'timezone' => 'getTimezone',
'wifi' => 'getWifi',
'status_net' => 'getStatusNet',
'status_fwr' => 'getStatusFwr'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['topic'] = isset($data['topic']) ? $data['topic'] : null;
        $this->container['full_topic'] = isset($data['full_topic']) ? $data['full_topic'] : null;
        $this->container['device_name'] = isset($data['device_name']) ? $data['device_name'] : null;
        $this->container['module'] = isset($data['module']) ? $data['module'] : null;
        $this->container['online'] = isset($data['online']) ? $data['online'] : null;
        $this->container['load_avg'] = isset($data['load_avg']) ? $data['load_avg'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['wifi'] = isset($data['wifi']) ? $data['wifi'] : null;
        $this->container['status_net'] = isset($data['status_net']) ? $data['status_net'] : null;
        $this->container['status_fwr'] = isset($data['status_fwr']) ? $data['status_fwr'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['topic'] === null) {
            $invalidProperties[] = "'topic' can't be null";
        }
        if ($this->container['full_topic'] === null) {
            $invalidProperties[] = "'full_topic' can't be null";
        }
        if ($this->container['online'] === null) {
            $invalidProperties[] = "'online' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets topic
     *
     * @return string
     */
    public function getTopic()
    {
        return $this->container['topic'];
    }

    /**
     * Sets topic
     *
     * @param string $topic Unique device topic
     *
     * @return $this
     */
    public function setTopic($topic)
    {
        $this->container['topic'] = $topic;

        return $this;
    }

    /**
     * Gets full_topic
     *
     * @return string
     */
    public function getFullTopic()
    {
        return $this->container['full_topic'];
    }

    /**
     * Sets full_topic
     *
     * @param string $full_topic Full topic format
     *
     * @return $this
     */
    public function setFullTopic($full_topic)
    {
        $this->container['full_topic'] = $full_topic;

        return $this;
    }

    /**
     * Gets device_name
     *
     * @return string
     */
    public function getDeviceName()
    {
        return $this->container['device_name'];
    }

    /**
     * Sets device_name
     *
     * @param string $device_name Device friendly name
     *
     * @return $this
     */
    public function setDeviceName($device_name)
    {
        $this->container['device_name'] = $device_name;

        return $this;
    }

    /**
     * Gets module
     *
     * @return string
     */
    public function getModule()
    {
        return $this->container['module'];
    }

    /**
     * Sets module
     *
     * @param string $module Device module type
     *
     * @return $this
     */
    public function setModule($module)
    {
        $this->container['module'] = $module;

        return $this;
    }

    /**
     * Gets online
     *
     * @return bool
     */
    public function getOnline()
    {
        return $this->container['online'];
    }

    /**
     * Sets online
     *
     * @param bool $online Device status
     *
     * @return $this
     */
    public function setOnline($online)
    {
        $this->container['online'] = $online;

        return $this;
    }

    /**
     * Gets load_avg
     *
     * @return int
     */
    public function getLoadAvg()
    {
        return $this->container['load_avg'];
    }

    /**
     * Sets load_avg
     *
     * @param int $load_avg Load Average
     *
     * @return $this
     */
    public function setLoadAvg($load_avg)
    {
        $this->container['load_avg'] = $load_avg;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone Timezone offset from GMT
     *
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets wifi
     *
     * @return \Swagger\Client\Model\Wifi
     */
    public function getWifi()
    {
        return $this->container['wifi'];
    }

    /**
     * Sets wifi
     *
     * @param \Swagger\Client\Model\Wifi $wifi wifi
     *
     * @return $this
     */
    public function setWifi($wifi)
    {
        $this->container['wifi'] = $wifi;

        return $this;
    }

    /**
     * Gets status_net
     *
     * @return \Swagger\Client\Model\Network
     */
    public function getStatusNet()
    {
        return $this->container['status_net'];
    }

    /**
     * Sets status_net
     *
     * @param \Swagger\Client\Model\Network $status_net status_net
     *
     * @return $this
     */
    public function setStatusNet($status_net)
    {
        $this->container['status_net'] = $status_net;

        return $this;
    }

    /**
     * Gets status_fwr
     *
     * @return \Swagger\Client\Model\Firmware
     */
    public function getStatusFwr()
    {
        return $this->container['status_fwr'];
    }

    /**
     * Sets status_fwr
     *
     * @param \Swagger\Client\Model\Firmware $status_fwr status_fwr
     *
     * @return $this
     */
    public function setStatusFwr($status_fwr)
    {
        $this->container['status_fwr'] = $status_fwr;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
